#!/usr/bin/env python

# Copyright 2010 ITA Software, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Start up nagcat
# If the package cannot be found automatically assume the source directory
# structure and look for it in ../python/ (ie if this is a svn checkout)

import os
import sys
import coil
import time
import socket
import urllib2
import traceback
from optparse import OptionParser

STATUS_OK = 0
STATUS_WARN = 1
STATUS_CRIT = 2
STATUS_UNKN = 3

DOC = """This reports any test tests that have stopped reporting to Nagios.

There may be several reasons for this:
    - Nagcat isn't running but Nagios is.
      This is pretty self-explanatory. :-)
    - Nagios is not processing results properly.
      This can happen if Nagios cannot keep up or hit a bug.
    - Oracle tests run by Nagcat have gotten stuck.
      This can happen when initiating a connection to Oralce fails in
      just the right way. The cx_Oracle API doesn't provide any way to
      time-out or cancel connect calls that hang so any tests depending
      on that query will also hang and stop running.
"""

try:
    from nagcat.nagios_objects import ObjectParser
    from nagcat import util
except ImportError:
    root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    sys.path.append("%s/python" % root)
    from nagcat.nagios_objects import ObjectParser
    from nagcat import util

class NagOptParser(OptionParser):
    """Override error to exit with the code for UNKNOWN"""

    def error(self, msg):
        self.exit(STATUS_UNKN,
                "%s: error: %s\n" % (self.get_prog_name(), msg))

class Checker(object):

    def __init__(self):
        self.state = STATUS_OK
        self.now = time.time()
        self.repeat = {}

    def parse_options(self):
        parser = OptionParser(
                description="Test freshness of all service checks.")
        parser.add_option('-n', '--nagcat-config',
                help="Path to nagcat's configuration coil file [optional]")
        parser.add_option('-s', '--status',
                default=os.environ.get('NAGIOS_STATUSDATAFILE', None),
                help="Path or URL to Nagios' status.dat file")
        parser.add_option('-t', '--timeout', default=15, type='int',
                help="Timeout in seconds for URLs [%default seconds]")
        parser.add_option('-u', '--username', default='',
                help="HTTP Basic username (if using an HTTP URL)")
        parser.add_option('-p', '--password', default='',
                help="HTTP Basic password (if using an HTTP URL)")
        parser.add_option('-w', '--warning', default=15, type='int',
                help="Threshold in minutes for WARNING [%default minutes]")
        parser.add_option('-c', '--critical', default=30, type='int',
                help="Threshold in minutes for CRITICAL [%default minutes]")
        self.options, args = parser.parse_args()
        if not self.options.status:
            parser.error("No status file provided")
        if args:
            parser.error("Unknown extra arguments")

    def load_repeats(self, nagcat_config):
        conf = coil.parse_file(nagcat_config, expand=False)
        for test, template in conf.iteritems():
            if 'repeat' in template:
                try:
                    repeat_val = util.Interval(template['repeat'])
                except util.IntervalError:
                    continue
                self.repeat[test] = repeat_val

    def check_object(self, obj):
        # skip entirely disabled tests or non-nagcat passive tests
        if (obj['active_checks_enabled'] == '0' and
                (obj['passive_checks_enabled'] == '0' or
                 '_TEST' not in obj)):
            return False

        extra = 60  # Default repeat value
        if obj['active_checks_enabled'] == '0' and '_TEST' in obj:
            test = obj['_TEST'].lstrip('0;')
            extra = self.repeat.get(test, extra)
            if '_REPEAT' in obj:
                try:
                    extra = util.Interval(obj['_REPEAT'])
                except util.IntervalError:
                    pass

        if extra != 60:
            print obj['_TEST']
            print extra

        freshness = (self.now - extra - int(obj['last_check'])) // 60
        if freshness > self.options.critical:
            self.state = max(self.state, STATUS_CRIT)
            return True
        elif freshness > self.options.warning:
            self.state = max(self.state, STATUS_WARN)
            return True
        else:
            return False

    def remote(self):
        socket.setdefaulttimeout(self.options.timeout)

        if self.options.username:
            manager = urllib2.HTTPPasswordMgrWithDefaultRealm()
            manager.add_password(None, self.options.status,
                    self.options.username, self.options.password)
            handler = urllib2.HTTPBasicAuthHandler(manager)
            opener = urllib2.build_opener(handler)
            urllib2.install_opener(opener)

        return urllib2.urlopen(self.options.status)

    def main(self):
        self.parse_options()
        if "://" in self.options.status:
            status_file = self.remote()
            try:
                status = ObjectParser(status_file)
            finally:
                status_file.close()
        else:
            status = ObjectParser(self.options.status)

        if self.options.nagcat_config:
            self.load_repeats(self.options.nagcat_config)

        badh = []
        bads = []

        for host in status['host']:
            if self.check_object(host):
                badh.append(host['host_name'])
        for service in status['service']:
            if self.check_object(service):
                bads.append("%s/%s" % (service['host_name'],
                    service['service_description']))

        if self.state == STATUS_OK:
            print "FRESHNESS OK: stale hosts = 0, stale services = 0\n"
        else:
            if self.state == STATUS_WARN:
                name = "WARNING"
            elif self.state == STATUS_CRIT:
                name = "CRITICAL"
            else:
                name = "UNKNOWN"

            print "FRESHNESS %s: stale hosts = %d, stale services = %d\n" % (
                    name, len(badh), len(bads))

            if badh:
                badh.sort()
                print "Stale hosts checks:"
                for name in badh:
                    print "    %s" % name
                print

            if bads:
                bads.sort()
                print "Stale service checks:"
                for name in bads:
                    print "    %s" % name
                print

        print DOC

        return self.state

if __name__ == "__main__":
    try:
        checker = Checker()
        sys.exit(checker.main())
    except Exception, ex:
        print "FRESHNESS UNKNOWN: %s" % (ex,)
        print
        traceback.print_exc(file=sys.stdout)
        sys.exit(STATUS_UNKN)
